// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator prismabox {
  provider                    = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output                      = "../prismaModels"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName   = "t"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "elysia"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  additionalProperties        = false
  // optionally enable the data model generation. See the data model section below for more info
  inputModel                  = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String?
  displayName    String
  fcmToken       String[]
  locale         String
  identityToken  String
  appUserId      String    @unique
  expirationAtMs Int       @default(0)
  createdAt      DateTime  @default(now())
  requestsCount  Int       @default(0)
  Message        Message[]
  Chat           Chat[]
}

enum MessageType {
  SYSTEM
  USER
  BOT
}

model Message {
  id        String      @id @default(cuid())
  userId    String
  text      String
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      MessageType
  Chat      Chat?       @relation(fields: [chatId], references: [id])
  chatId    String?
}

model Chat {
  id        String    @id
  userId    String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}
