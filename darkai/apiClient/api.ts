/* tslint:disable */
/* eslint-disable */
/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetChatGetChat200Response
 */
export interface GetChatGetChat200Response {
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChat200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChat200Response
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChat200Response
     */
    'threadId': string | null;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChat200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {PostChatSendMessage200ResponseMessage}
     * @memberof GetChatGetChat200Response
     */
    'lastMessage'?: PostChatSendMessage200ResponseMessage;
}
/**
 * 
 * @export
 * @interface GetChatGetChats200ResponseInner
 */
export interface GetChatGetChats200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChats200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChats200ResponseInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChats200ResponseInner
     */
    'threadId': string | null;
    /**
     * 
     * @type {string}
     * @memberof GetChatGetChats200ResponseInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<PostChatSendMessage200ResponseMessage>}
     * @memberof GetChatGetChats200ResponseInner
     */
    'messages': Array<PostChatSendMessage200ResponseMessage>;
}
/**
 * 
 * @export
 * @interface GetChatGetMessages200Response
 */
export interface GetChatGetMessages200Response {
    /**
     * 
     * @type {Array<PostChatSendMessage200ResponseMessage>}
     * @memberof GetChatGetMessages200Response
     */
    'messages': Array<PostChatSendMessage200ResponseMessage>;
    /**
     * 
     * @type {GetChatGetMessages200ResponsePagination}
     * @memberof GetChatGetMessages200Response
     */
    'pagination': GetChatGetMessages200ResponsePagination;
}
/**
 * 
 * @export
 * @interface GetChatGetMessages200ResponsePagination
 */
export interface GetChatGetMessages200ResponsePagination {
    /**
     * 
     * @type {number}
     * @memberof GetChatGetMessages200ResponsePagination
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetChatGetMessages200ResponsePagination
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof GetChatGetMessages200ResponsePagination
     */
    'totalMessages': number;
    /**
     * 
     * @type {number}
     * @memberof GetChatGetMessages200ResponsePagination
     */
    'totalPages': number;
}
/**
 * 
 * @export
 * @interface GetDebugCheck200Response
 */
export interface GetDebugCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof GetDebugCheck200Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof GetDebugCheck200Response
     */
    'time': string;
}
/**
 * 
 * @export
 * @interface GetDebugFollowUp200Response
 */
export interface GetDebugFollowUp200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetDebugFollowUp200Response
     */
    'success': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetDebugFollowUp200Response
     */
    'processedChats': number;
    /**
     * 
     * @type {number}
     * @memberof GetDebugFollowUp200Response
     */
    'sentFollowUps': number;
}
/**
 * 
 * @export
 * @interface GetUserMe200Response
 */
export interface GetUserMe200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserMe200Response
     */
    'hasFreeRequests': boolean;
}
/**
 * 
 * @export
 * @interface PostAdminTestFollowUp200Response
 */
export interface PostAdminTestFollowUp200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostAdminTestFollowUp200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface PostChatSendMessage200Response
 */
export interface PostChatSendMessage200Response {
    /**
     * 
     * @type {PostChatSendMessage200ResponseMessage}
     * @memberof PostChatSendMessage200Response
     */
    'message': PostChatSendMessage200ResponseMessage;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessage200Response
     */
    'threadId': string;
}
/**
 * 
 * @export
 * @interface PostChatSendMessage200ResponseMessage
 */
export interface PostChatSendMessage200ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'text': string;
    /**
     * 
     * @type {PostChatSendMessage200ResponseMessageCreatedAt}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'createdAt': PostChatSendMessage200ResponseMessageCreatedAt;
    /**
     * 
     * @type {PostChatSendMessage200ResponseMessageType}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'type': PostChatSendMessage200ResponseMessageType;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessage200ResponseMessage
     */
    'chatId': string | null;
}
/**
 * 
 * @export
 * @interface PostChatSendMessage200ResponseMessageCreatedAt
 */
export interface PostChatSendMessage200ResponseMessageCreatedAt {
}
/**
 * 
 * @export
 * @interface PostChatSendMessage200ResponseMessageType
 */
export interface PostChatSendMessage200ResponseMessageType {
}
/**
 * 
 * @export
 * @interface PostChatSendMessageRequest
 */
export interface PostChatSendMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessageRequest
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessageRequest
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessageRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof PostChatSendMessageRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface PostUserCheckSubscription200Response
 */
export interface PostUserCheckSubscription200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostUserCheckSubscription200Response
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface PostUserLoginAppleRequest
 */
export interface PostUserLoginAppleRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'appUserId': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'identityToken': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'fcmToken': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginAppleRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface PostUserLoginRequest
 */
export interface PostUserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'appUserId': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'identityToken': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'fcmToken': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserLoginRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface PostUserUpdateLocaleRequest
 */
export interface PostUserUpdateLocaleRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserUpdateLocaleRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface PostUserUserUpdateFcmToken200Response
 */
export interface PostUserUserUpdateFcmToken200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostUserUserUpdateFcmToken200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PostUserUserUpdateFcmToken200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostUserUserUpdateFcmTokenRequest
 */
export interface PostUserUserUpdateFcmTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserUserUpdateFcmTokenRequest
     */
    'fcmToken': string;
}
/**
 * 
 * @export
 * @interface PutChatRenameChat200Response
 */
export interface PutChatRenameChat200Response {
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChat200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChat200Response
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChat200Response
     */
    'threadId': string | null;
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChat200Response
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface PutChatRenameChatRequest
 */
export interface PutChatRenameChatRequest {
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChatRequest
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof PutChatRenameChatRequest
     */
    'newTitle': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatDeleteAllChats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat/deleteAllChats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatDeleteChat: async (chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteChatDeleteChat', 'chatId', chatId)
            const localVarPath = `/chat/deleteChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chatId !== undefined) {
                localVarQueryParameter['chatId'] = chatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalytics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetChat: async (chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatGetChat', 'chatId', chatId)
            const localVarPath = `/chat/getChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chatId !== undefined) {
                localVarQueryParameter['chatId'] = chatId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetChats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat/getChats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetMessages: async (chatId: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getChatGetMessages', 'chatId', chatId)
            const localVarPath = `/chat/getMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chatId !== undefined) {
                localVarQueryParameter['chatId'] = chatId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/debug/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugFollowUp: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/debug/follow-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminTestFollowUp: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/test-follow-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnalyticsLaunch: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postAnalyticsLaunch', 'body', body)
            const localVarPath = `/analytics/launch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostChatSendMessageRequest} postChatSendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatSendMessage: async (postChatSendMessageRequest: PostChatSendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postChatSendMessageRequest' is not null or undefined
            assertParamExists('postChatSendMessage', 'postChatSendMessageRequest', postChatSendMessageRequest)
            const localVarPath = `/chat/sendMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postChatSendMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHooksRevenueCat: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hooks/revenue-cat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCheckSubscription: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/check-subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserDeleteAccount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/delete-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostUserLoginRequest} postUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLogin: async (postUserLoginRequest: PostUserLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserLoginRequest' is not null or undefined
            assertParamExists('postUserLogin', 'postUserLoginRequest', postUserLoginRequest)
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostUserLoginAppleRequest} postUserLoginAppleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLoginApple: async (postUserLoginAppleRequest: PostUserLoginAppleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserLoginAppleRequest' is not null or undefined
            assertParamExists('postUserLoginApple', 'postUserLoginAppleRequest', postUserLoginAppleRequest)
            const localVarPath = `/user/login-apple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserLoginAppleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostUserUpdateLocaleRequest} postUserUpdateLocaleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUpdateLocale: async (postUserUpdateLocaleRequest: PostUserUpdateLocaleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserUpdateLocaleRequest' is not null or undefined
            assertParamExists('postUserUpdateLocale', 'postUserUpdateLocaleRequest', postUserUpdateLocaleRequest)
            const localVarPath = `/user/update-locale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserUpdateLocaleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostUserUserUpdateFcmTokenRequest} postUserUserUpdateFcmTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUserUpdateFcmToken: async (postUserUserUpdateFcmTokenRequest: PostUserUserUpdateFcmTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserUserUpdateFcmTokenRequest' is not null or undefined
            assertParamExists('postUserUserUpdateFcmToken', 'postUserUserUpdateFcmTokenRequest', postUserUserUpdateFcmTokenRequest)
            const localVarPath = `/user/user/update-fcm-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserUserUpdateFcmTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PutChatRenameChatRequest} putChatRenameChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putChatRenameChat: async (putChatRenameChatRequest: PutChatRenameChatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putChatRenameChatRequest' is not null or undefined
            assertParamExists('putChatRenameChat', 'putChatRenameChatRequest', putChatRenameChatRequest)
            const localVarPath = `/chat/rename-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putChatRenameChatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatDeleteAllChats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAdminTestFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatDeleteAllChats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteChatDeleteAllChats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatDeleteChat(chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAdminTestFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatDeleteChat(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteChatDeleteChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalytics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAdminTestFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalytics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatGetChat(chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatGetChat200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatGetChat(chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatGetChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatGetChats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetChatGetChats200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatGetChats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatGetChats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} chatId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatGetMessages(chatId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChatGetMessages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatGetMessages(chatId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChatGetMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDebugCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDebugCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDebugCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDebugCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDebugFollowUp(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDebugFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDebugFollowUp(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDebugFollowUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserMe200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMe(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAdminTestFollowUp(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAdminTestFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdminTestFollowUp(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postAdminTestFollowUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAnalyticsLaunch(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAdminTestFollowUp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAnalyticsLaunch(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postAnalyticsLaunch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostChatSendMessageRequest} postChatSendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChatSendMessage(postChatSendMessageRequest: PostChatSendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostChatSendMessage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postChatSendMessage(postChatSendMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postChatSendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHooksRevenueCat(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHooksRevenueCat(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postHooksRevenueCat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCheckSubscription(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserCheckSubscription200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserCheckSubscription(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserCheckSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserDeleteAccount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserDeleteAccount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserDeleteAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostUserLoginRequest} postUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserLogin(postUserLoginRequest: PostUserLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserLogin(postUserLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostUserLoginAppleRequest} postUserLoginAppleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserLoginApple(postUserLoginAppleRequest: PostUserLoginAppleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserLoginApple(postUserLoginAppleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserLoginApple']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostUserUpdateLocaleRequest} postUserUpdateLocaleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUpdateLocale(postUserUpdateLocaleRequest: PostUserUpdateLocaleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserUpdateLocale(postUserUpdateLocaleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserUpdateLocale']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostUserUserUpdateFcmTokenRequest} postUserUserUpdateFcmTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest: PostUserUserUpdateFcmTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserUserUpdateFcmToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserUserUpdateFcmToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PutChatRenameChatRequest} putChatRenameChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putChatRenameChat(putChatRenameChatRequest: PutChatRenameChatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutChatRenameChat200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putChatRenameChat(putChatRenameChatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putChatRenameChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatDeleteAllChats(options?: RawAxiosRequestConfig): AxiosPromise<PostAdminTestFollowUp200Response> {
            return localVarFp.deleteChatDeleteAllChats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatDeleteChat(chatId: string, options?: RawAxiosRequestConfig): AxiosPromise<PostAdminTestFollowUp200Response> {
            return localVarFp.deleteChatDeleteChat(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalytics(options?: RawAxiosRequestConfig): AxiosPromise<PostAdminTestFollowUp200Response> {
            return localVarFp.getAnalytics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetChat(chatId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetChatGetChat200Response> {
            return localVarFp.getChatGetChat(chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetChats(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetChatGetChats200ResponseInner>> {
            return localVarFp.getChatGetChats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatGetMessages(chatId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetChatGetMessages200Response> {
            return localVarFp.getChatGetMessages(chatId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugCheck(options?: RawAxiosRequestConfig): AxiosPromise<GetDebugCheck200Response> {
            return localVarFp.getDebugCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugFollowUp(options?: RawAxiosRequestConfig): AxiosPromise<GetDebugFollowUp200Response> {
            return localVarFp.getDebugFollowUp(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options?: RawAxiosRequestConfig): AxiosPromise<GetUserMe200Response> {
            return localVarFp.getUserMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminTestFollowUp(options?: RawAxiosRequestConfig): AxiosPromise<PostAdminTestFollowUp200Response> {
            return localVarFp.postAdminTestFollowUp(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnalyticsLaunch(body: object, options?: RawAxiosRequestConfig): AxiosPromise<PostAdminTestFollowUp200Response> {
            return localVarFp.postAnalyticsLaunch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostChatSendMessageRequest} postChatSendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatSendMessage(postChatSendMessageRequest: PostChatSendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostChatSendMessage200Response> {
            return localVarFp.postChatSendMessage(postChatSendMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHooksRevenueCat(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postHooksRevenueCat(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCheckSubscription(options?: RawAxiosRequestConfig): AxiosPromise<PostUserCheckSubscription200Response> {
            return localVarFp.postUserCheckSubscription(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserDeleteAccount(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postUserDeleteAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostUserLoginRequest} postUserLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLogin(postUserLoginRequest: PostUserLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postUserLogin(postUserLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostUserLoginAppleRequest} postUserLoginAppleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLoginApple(postUserLoginAppleRequest: PostUserLoginAppleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postUserLoginApple(postUserLoginAppleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostUserUpdateLocaleRequest} postUserUpdateLocaleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUpdateLocale(postUserUpdateLocaleRequest: PostUserUpdateLocaleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postUserUpdateLocale(postUserUpdateLocaleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostUserUserUpdateFcmTokenRequest} postUserUserUpdateFcmTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest: PostUserUserUpdateFcmTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostUserUserUpdateFcmToken200Response> {
            return localVarFp.postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PutChatRenameChatRequest} putChatRenameChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putChatRenameChat(putChatRenameChatRequest: PutChatRenameChatRequest, options?: RawAxiosRequestConfig): AxiosPromise<PutChatRenameChat200Response> {
            return localVarFp.putChatRenameChat(putChatRenameChatRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteChatDeleteAllChats(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteChatDeleteAllChats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteChatDeleteChat(chatId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteChatDeleteChat(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAnalytics(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAnalytics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chatId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatGetChat(chatId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatGetChat(chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatGetChats(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatGetChats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chatId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChatGetMessages(chatId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChatGetMessages(chatId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDebugCheck(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDebugCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDebugFollowUp(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDebugFollowUp(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserMe(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAdminTestFollowUp(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAdminTestFollowUp(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAnalyticsLaunch(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAnalyticsLaunch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostChatSendMessageRequest} postChatSendMessageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postChatSendMessage(postChatSendMessageRequest: PostChatSendMessageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postChatSendMessage(postChatSendMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postHooksRevenueCat(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postHooksRevenueCat(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserCheckSubscription(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserCheckSubscription(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserDeleteAccount(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserDeleteAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostUserLoginRequest} postUserLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserLogin(postUserLoginRequest: PostUserLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserLogin(postUserLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostUserLoginAppleRequest} postUserLoginAppleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserLoginApple(postUserLoginAppleRequest: PostUserLoginAppleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserLoginApple(postUserLoginAppleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostUserUpdateLocaleRequest} postUserUpdateLocaleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserUpdateLocale(postUserUpdateLocaleRequest: PostUserUpdateLocaleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserUpdateLocale(postUserUpdateLocaleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostUserUserUpdateFcmTokenRequest} postUserUserUpdateFcmTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest: PostUserUserUpdateFcmTokenRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserUserUpdateFcmToken(postUserUserUpdateFcmTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PutChatRenameChatRequest} putChatRenameChatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putChatRenameChat(putChatRenameChatRequest: PutChatRenameChatRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putChatRenameChat(putChatRenameChatRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



